/**
* ----------------------------------------------
*   USER SETTINGS
* ----------------------------------------------
*/

/**
PRIMARY COLOR
---
A CSS value. Set it and obtain SASS variables with assorted color combinations
that allows to maintain enhanced readability.
*/
$qtr_color_primary:                         #f49a1a;

/**
SMART CONTRAST
---
A boolean value. Recommended is true. This is the behavior of the computed colors by Quikster.
If true, computes all colors according to the primary color luminance
true
    Luminance > 50%
        Contrasted colors are darker
        Most contrasted color is black
        Accented contrasted colors are lighter
        Most accented contrasted color is white
    Luminance =< 50%
        Contrasted colors are lighter
        Most contrasted color is white
        Accented contrasted colors are darker
        Most accented contrasted color is black
false
    Luminance > 50%
        Contrasted colors are lighter
        Most contrasted color is white
        Accented contrasted colors are darker
        Most accented contrasted color is black
    Luminance =< 50%
        Contrasted colors are darker
        Most contrasted color is black
        Accented contrasted colors are lighter
        Most accented contrasted color is white
*/
$qtr_smart_contrast:                        true;

/**
FONT SIZE UNIT
---
Determines the font size unit (em, rem, px, vw, vh, vmin, vmax etc)
*/
$qtr_font_size_unit:                        em;

/**
FONT SIZE SOURCE
---
This is the default font size without any unit.
*/
$qtr_font_size_source:                      1.2;

/**
LARGEST FONT SIZE
---
This is the largest font size of the project
*/
$qtr_font_size_largest:                     4;

/**
SMALLEST FONT SIZE
---
This is the smallest font size of the project
*/
$qtr_font_size_smallest:                    0.35;

/**
 DEFAULT FONT FAMILY
---
The default fallback/system font, used if no custom font is set
*/
$qtr_font_family_default:                   Arial, sans-serif;

/**
FONTS
---
Here you set your font families. Quikster supports local fonts, Google Fonts and web safe fonts
Add as much fonts as you want
Each font is identified with its number

For example:
font-family: qtr-font-family(1);
Will return
font-family: "Aaargh-webfont", Arial, sans-serif;
*/
$qtr_font_families: (
    //A Google Font
    1: ( //{string} or {number} - ID of the Quikster font family
        type:                               'google', //{string} - Valid Google Font family name
        name:                               'Montserrat', //{string} - Valid weight for this font family
        weight:                             'Bold', //{string} - If resource fails to load, this is the fallback system font family name. Each font family can have its own fallback font family
        fallback:                            $qtr_font_family_default //{string} - If resource fails to load, this is the fallback system font family name. Each Quikster font family can have its own fallback font family
    ),
    //A Google Font
    2: ( //{string} or {number} - ID of the Quikster font family
        type:                               'google', //{string} - Valid Google Font family name
        name:                               'Ubuntu', //{string} - Valid weight for this font family
        weight:                             'Light', //{string} - If resource fails to load, this is the fallback system font family name. Each font family can have its own fallback font family
        fallback:                           $qtr_font_family_default //{string} - If resource fails to load, this is the fallback system font family name. Each Quikster font family can have its own fallback font family
    )
);

/**
BREAK POINTS
---
Quikster supports 5 screen widths: Extra-small, small, medium, large and extra-large.
*/
$qtr_screen_mini:             	       		34em;
$qtr_screen_small:              	        48em;
$qtr_screen_medium:             		    62em;
$qtr_screen_large:             			    75em;

/**
DEFAULT TRANSITION TIME
---
Set a default transition time for your project.
*/
$qtr_transition_time:                       300ms;

//END USER SETTINGS



/**
* ----------------------------------------------
*   DO NOT EDIT ANYTHING BELOW THIS LINE
* ----------------------------------------------
*/
//FUNCTIONS
// Companion demo for https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function luminance($color) {
    $red: nth($linear-channel-values, red($color) + 1);
    $green: nth($linear-channel-values, green($color) + 1);
    $blue: nth($linear-channel-values, blue($color) + 1);
    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}
// Calculate the contrast ratio between two colors.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function contrast($back, $front) {
    $backLum: luminance($back) + 0.05;
    $foreLum: luminance($front) + 0.05;
    @return max($backLum, $foreLum) / min($backLum, $foreLum);
}
// Determine whether to use dark or light text on top of given color.
// Returns black for dark text and white for light text.
@function choose-contrast-color($color) {
    $lightContrast: contrast($color, white);
    $darkContrast: contrast($color, black);
    @if ($lightContrast > $darkContrast) {
         @return white;
    }
    @else {
         @return black;
    }
}
//  Precomputed linear color channel values, for use in contrast calculations.
//  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
//
//  Algorithm, for c in 0 to 255:
//  f(c) {
//    c = c / 255;
//    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
//  }
//
//  This lookup table is needed since there is no `pow` in SASS.
$linear-channel-values: 0 0.0003035269835488375 0.000607053967097675 0.0009105809506465125 0.00121410793419535 0.0015176349177441874 0.001821161901293025 0.0021246888848418626 0.0024282158683907 0.0027317428519395373 0.003035269835488375 0.003346535763899161 0.003676507324047436 0.004024717018496307 0.004391442037410293 0.004776953480693729 0.005181516702338386 0.005605391624202723 0.006048833022857054 0.006512090792594475 0.006995410187265387 0.007499032043226175 0.008023192985384994 0.008568125618069307 0.009134058702220787 0.00972121732023785 0.010329823029626936 0.010960094006488246 0.011612245179743885 0.012286488356915872 0.012983032342173012 0.013702083047289686 0.014443843596092545 0.01520851442291271 0.01599629336550963 0.016807375752887384 0.017641954488384078 0.018500220128379697 0.019382360956935723 0.0202885630566524 0.021219010376003555 0.022173884793387385 0.02315336617811041 0.024157632448504756 0.02518685962736163 0.026241221894849898 0.027320891639074894 0.028426039504420793 0.0295568344378088 0.030713443732993635 0.03189603307301153 0.033104766570885055 0.03433980680868217 0.03560131487502034 0.03688945040110004 0.0382043715953465 0.03954623527673284 0.04091519690685319 0.042311410620809675 0.043735029256973465 0.04518620438567554 0.046665086336880095 0.04817182422688942 0.04970656598412723 0.05126945837404324 0.052860647023180246 0.05448027644244237 0.05612849004960009 0.05780543019106723 0.0595112381629812 0.06124605423161761 0.06301001765316767 0.06480326669290577 0.06662593864377289 0.06847816984440017 0.07036009569659588 0.07227185068231748 0.07421356838014963 0.07618538148130785 0.07818742180518633 0.08021982031446832 0.0822827071298148 0.08437621154414882 0.08650046203654976 0.08865558628577294 0.09084171118340768 0.09305896284668745 0.0953074666309647 0.09758734714186246 0.09989872824711389 0.10224173308810132 0.10461648409110419 0.10702310297826761 0.10946171077829933 0.1119324278369056 0.11443537382697373 0.11697066775851084 0.11953842798834562 0.12213877222960187 0.12477181756095049 0.12743768043564743 0.1301364766903643 0.13286832155381798 0.13563332965520566 0.13843161503245183 0.14126329114027164 0.14412847085805777 0.14702726649759498 0.14995978981060856 0.15292615199615017 0.1559264637078274 0.1589608350608804 0.162029375639111 0.1651321945016676 0.16826940018969075 0.1714411007328226 0.17464740365558504 0.17788841598362912 0.18116424424986022 0.184474994500441 0.18782077230067787 0.19120168274079138 0.1946178304415758 0.19806931955994886 0.20155625379439707 0.20507873639031693 0.20863687014525575 0.21223075741405523 0.21586050011389926 0.2195261997292692 0.2232279573168085 0.22696587351009836 0.23074004852434915 0.23455058216100522 0.238397573812271 0.24228112246555486 0.24620132670783548 0.25015828472995344 0.25415209433082675 0.2581828529215958 0.26225065752969623 0.26635560480286247 0.2704977910130658 0.27467731206038465 0.2788942634768104 0.2831487404299921 0.2874408377269175 0.29177064981753587 0.2961382707983211 0.3005437944157765 0.3049873140698863 0.30946892281750854 0.31398871337571754 0.31854677812509186 0.32314320911295075 0.3277780980565422 0.33245153634617935 0.33716361504833037 0.3419144249086609 0.3467040563550296 0.35153259950043936 0.3564001441459435 0.3613067797835095 0.3662525955988395 0.3712376804741491 0.3762621229909065 0.38132601143253014 0.386429433787049 0.39157247774972326 0.39675523072562685 0.4019777798321958 0.4072402119017367 0.41254261348390375 0.4178850708481375 0.4232676699860717 0.4286904966139066 0.43415363617474895 0.4396571738409188 0.44520119451622786 0.45078578283822346 0.45641102318040466 0.4620769996544071 0.467783796112159 0.47353149614800955 0.4793201831008268 0.4851499400560704 0.4910208498478356 0.4969329950608704 0.5028864580325687 0.5088813208549338 0.5149176653765214 0.5209955732043543 0.5271151257058131 0.5332764040105052 0.5394794890121072 0.5457244613701866 0.5520114015120001 0.5583403896342679 0.5647115057049292 0.5711248294648731 0.5775804404296506 0.5840784178911641 0.5906188409193369 0.5972017883637634 0.6038273388553378 0.6104955708078648 0.6172065624196511 0.6239603916750761 0.6307571363461468 0.6375968739940326 0.6444796819705821 0.6514056374198242 0.6583748172794485 0.665387298282272 0.6724431569576875 0.6795424696330938 0.6866853124353135 0.6938717612919899 0.7011018919329731 0.7083757798916868 0.7156935005064807 0.7230551289219693 0.7304607400903537 0.7379104087727308 0.7454042095403874 0.7529422167760779 0.7605245046752924 0.768151147247507 0.7758222183174236 0.7835377915261935 0.7912979403326302 0.799102738014409 0.8069522576692516 0.8148465722161012 0.8227857543962835 0.8307698767746546 0.83879901174074 0.846873231509858 0.8549926081242338 0.8631572134541023 0.8713671191987972 0.8796223968878317 0.8879231178819663 0.8962693533742664 0.9046611743911496 0.9130986517934192 0.9215818562772946 0.9301108583754237 0.938685728457888 0.9473065367331999 0.9559733532492861 0.9646862478944651 0.9734452903984125 0.9822505503331171 0.9911020971138298 1;
//Font size
@function qtr-font-size($size: 0, $raw: $qtr_font_size_unit) {
    @if ($size == 6) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxxxxlarge+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxxxxlarge;
        }
    }
    @if ($size == 5) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxxxlarge+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxxxlarge;
        }
    }
    @if ($size == 4) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxxlarge+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxxlarge;
        }
    }
    @if ($size == 3) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxlarge+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxlarge;
        }
    }
    @if ($size == 2) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xlarge+$qtr_font_size_unit;
        }@else{
            @return $font_size_xlarge;
        }
    }
    @if ($size == 1) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_large+$qtr_font_size_unit;
        }@else{
            @return $font_size_large;
        }
    }
    @if ($size == -1) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_small+$qtr_font_size_unit;
        }@else{
            @return $font_size_small;
        }
    }
    @if ($size == -2) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xsmall+$qtr_font_size_unit;
        }@else{
            @return $font_size_xsmall;
        }
    }
    @if ($size == -3) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxsmall+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxsmall;
        }
    }
    @if ($size == -4) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxxsmall+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxxsmall;
        }
    }
    @if ($size == -5) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxxxsmall+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxxxsmall;
        }
    }
    @if ($size == -6) {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_xxxxxsmall+$qtr_font_size_unit;
        }@else{
            @return $font_size_xxxxxsmall;
        }
    }
    @else {
        @if ($raw == $qtr_font_size_unit){
            @return $font_size_base+$qtr_font_size_unit;
        }@else{
            @return $font_size_base;
        }
    }
}
//Color smart contrast
@function qtr-color($level:0, $color: $color_primary) {
    @if ($color == triadic1) or ($level == triadic1) { @return $color_primary_triadic_1; }
    @if ($color == triadic2) or ($level == triadic2) { @return $color_primary_triadic_2; }
    @if ($color == complement) or ($level == complement) { @return $color_primary_complement; }

    @if ($level == 0) { @return $color; }
    @if ($color != $color_primary){
        $step:0;
        @if ($level == -1) { $step: 1; $smart_contrast: false; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == -2) { $step: 2; $smart_contrast: false; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == -3) { $step: 3; $smart_contrast: false; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == -4) { $step: 4; $smart_contrast: false; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == -5) { $step: 5; $smart_contrast: false; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == -6) { $step: 6; $smart_contrast: false; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == 1) { $step: 1; $smart_contrast: true; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == 2) { $step: 2; $smart_contrast: true; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == 3) { $step: 3; $smart_contrast: true; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == 4) { $step: 4; $smart_contrast: true; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == 5) { $step: 5; $smart_contrast: true; @return smart-contrast($step, $smart_contrast, $color); };
        @if ($level == 6) { $step: 6; $smart_contrast: true; @return smart-contrast($step, $smart_contrast, $color); };

    }
    @if ($level == max) or ($level == 6){ @return $color_primary_contrast_max; }
    @if ($level == 5) { @return $color_primary_contrast_5; }
    @if ($level == 4) { @return $color_primary_contrast_4; }
    @if ($level == 3) { @return $color_primary_contrast_3; }
    @if ($level == 2) { @return $color_primary_contrast_2; }
    @if ($level == 1) { @return $color_primary_contrast_1; }
    @if ($level == 0) { @return $color_primary; } @if ($level == -1) { @return $color_primary_contrast_accent_1; }
    @if ($level == -2) { @return $color_primary_contrast_accent_2; }
    @if ($level == -3) { @return $color_primary_contrast_accent_3; }
    @if ($level == -4) { @return $color_primary_contrast_accent_4; }
    @if ($level == -5) { @return $color_primary_contrast_accent_5; }
    @if ($level == min) or ($level == -6) { @return $color_primary_contrast_accent_max; }
}
//String replace
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    @if $index {
         @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

//Contrast calcutations
@function smart-contrast($step: 6, $smart: $smart_contrast, $color: $color_primary) {
    $color_final: null;
    $lightness: lightness($color);
    $luminance: luminance($color);
    @if ($step == triadic1) {
         @return adjust_hue($color, 120);
    }
    @if ($step == triadic2) {
         @return adjust_hue($color, -120);
    }
    @if ($step == complement) {
         @return adjust_hue($color, 180);
    }
    //Accentuated contrast mode
    @if ($smart == false) {
         @if ($luminance > 0.5){
            $new_amount: ($step/6) * (100 - strip-units($lightness));
            $color_final: lighten($color, $new_amount);
        }
        @else {
            $new_amount: ($step/6) * strip-units($lightness);
            $color_final: darken($color, $new_amount);
        }
    }
    //Smart contrast mode
    @else {
         @if ($luminance > 0.5){
            $new_amount: ($step/6) * strip-units($lightness);
            $color_final: darken($color, $new_amount);
        }
        @else {
            $new_amount: ($step/6) * (100 - strip-units($lightness));
            $color_final: lighten($color, $new_amount);
        }
    }
    @return $color_final;
}
//List contains?
@function list-contains($list,$var) {
    $output: false;
    @each $item in $list {
         @if $item == $var{
            $output: true;
        }
    }
    @return $output;
}
//Int parser
@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}
//Font families
@function qtr-font-family($rank){
    //convert number to string
    $rank_number: inspect($rank);
    //Single number ID
    @if (map-has-key($font_families,$rank_number)) {
        @return map-get($font_families, $rank_number);
    //Custom string ID
    }@elseif (map-has-key($font_families,$rank)) {
        @return map-get($font_families, $rank);
    } @else {
        @return null;
    }
}
//END FUNCTIONS

//MIXINS

@mixin qtr-border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}
@mixin qtr-transition($data...) {
    -webkit-transition: $data;
    -moz-transition: $data;
    -ms-transition: $data;
    transition: $data;
}
@mixin qtr-transform($data...) {
    -webkit-transform: $data;
    -moz-transform: $data;
    -ms-transform: $data;
    transform: $data;
}
@mixin qtr-box-shadow($data) {
    -webkit-box-shadow: $data;
    -moz-box-shadow: $data;
    -ms-box-shadow: $data;
    box-shadow: $data;
}
@mixin qtr-background-gradient($color1:$color_primary, $color2:$color_primary_contrast_accent_2, $angle:-180deg) {
    background: $color1; /* For browsers that do not support gradients */
    background: -webkit-linear-gradient($angle, $color1, $color2); /* For Safari 5.1 to 6.0 */
    background: -o-linear-gradient($angle, $color1, $color2); /* For Opera 11.1 to 12.0 */
    background: -moz-linear-gradient($angle, $color1, $color2); /* For Firefox 3.6 to 15 */
    background: linear-gradient($angle, $color1, $color2); /* Standard syntax */
}
@mixin qtr-screen-xs {
    @media (max-width: $screen_mini) { @content; }
}
@mixin qtr-screen-sm {
    @media (min-width: $screen_mini) and (max-width: $screen_small) { @content; }
}
@mixin qtr-screen-md {
    @media (min-width: $screen_small) and (max-width: $screen_medium) { @content; }
}
@mixin qtr-screen-lg{
    @media (min-width: $screen_medium) and (max-width: $screen_large) { @content; }
}
@mixin qtr-screen-xl {
    @media (min-width: $screen_large) { @content; }
}
@mixin qtr-screen($data...){
    @if(list-contains($data,xs) == true){
        @media (max-width: $screen_mini) {@content;}
    }
    @if(list-contains($data,sm) == true){
        @media (min-width: $screen_mini) and (max-width: $screen_small) {@content;}
    }
    @if(list-contains($data,md) == true){
        @media (min-width: $screen_small) and (max-width: $screen_medium) {@content;}
    }
    @if(list-contains($data,lg) == true){
        @media (min-width: $screen_medium) and (max-width: $screen_large) {@content;}
    }
    @if(list-contains($data,xl) == true){
        @media (min-width: $screen_large) {@content;}
    }
}
@mixin qtr-keyframe($animation_name) {
    @-webkit-keyframes #{$animation_name} {
        @content;
    }
    @-moz-keyframes #{$animation_name} {
        @content;
    }
    @-o-keyframes #{$animation_name} {
        @content;
    }
    @keyframes #{$animation_name} {
        @content;
    }
}
@mixin qtr-animation ($animation:none, $delay:0s, $duration:1s, $iteration:infinite, $easing:ease, $origin:center) {
    -webkit-animation-delay: $delay;
    -webkit-animation-duration: $duration;
    -webkit-animation-name: $animation;
    -webkit-animation-iteration-count: $iteration;
    -webkit-animation-timing-function: $easing;
    -webkit-animation-fill-mode: forwards; // this prevents the animation from restarting
    -webkit-transform-origin: $origin;

    -moz-animation-delay: $delay;
    -moz-animation-duration: $duration;
    -moz-animation-name: $animation;
    -moz-animation-iteration-count: $iteration;
    -moz-animation-fill-mode: forwards;
    -moz-animation-timing-function: $easing;
    -moz-transform-origin: $origin;

    animation-delay: $delay;
    animation-duration: $duration;
    animation-name: $animation;
    animation-iteration-count: $iteration;
    animation-fill-mode: forwards;
    animation-timing-function: $easing;
    transform-origin: $origin;
}

//END MIXINS

//GLOBAL SETTINGS
$color_primary:                         $qtr_color_primary;
$smart_contrast:                        $qtr_smart_contrast;
$qtr_font_size_unit:                    $qtr_font_size_unit;
$font_size_source:                      $qtr_font_size_source;
$font_size_largest:                     $qtr_font_size_largest;
$font_size_smallest:                    $qtr_font_size_smallest;
$font_family_primary_default:           $qtr_font_family_default;
$screen_mini:             	       		$qtr_screen_mini;
$screen_small:              	        $qtr_screen_small;
$screen_medium:             		    $qtr_screen_medium;
$screen_large:             			    $qtr_screen_large;
$transition_time:                       $qtr_transition_time;
//END GLOBAL SETTINGS

//SUB SETTINGS
$font_size_large_coef:                  $font_size_largest / $font_size_source;
$font_size_small_coef:                  $font_size_smallest / $font_size_source;

$color_primary_contrast_1:              smart-contrast(1);
$color_primary_contrast_2:              smart-contrast(2);
$color_primary_contrast_3:              smart-contrast(3);
$color_primary_contrast_4:              smart-contrast(4);
$color_primary_contrast_5:              smart-contrast(5);
$color_primary_contrast_max:            smart-contrast(6);
$color_primary_contrast_accent_1:       smart-contrast(1, false);
$color_primary_contrast_accent_2:       smart-contrast(2, false);
$color_primary_contrast_accent_3:       smart-contrast(3, false);
$color_primary_contrast_accent_4:       smart-contrast(4, false);
$color_primary_contrast_accent_5:       smart-contrast(5, false);
$color_primary_contrast_accent_max:     smart-contrast(6, false);

//Complementary color
$color_primary_complement: 		        adjust_hue($color_primary, 180);
$color_primary_triadic_1: 		        adjust_hue($color_primary, 120);
$color_primary_triadic_2: 		        adjust_hue($color_primary, -120);

//Custom colors
$color_full_white:           			#FFFFFF;
$color_white:           	     		#EEEEEE;
$color_soft_white:       	     		#BBBBBB;
$color_medium_grey:         			#999999;
$color_soft_black:         			    #333333;
$color_black:              			    #111111;
$color_full_black:         			    #000000;
$color_facebook:            			#4E71A8;
$color_twitter:             			#1CB7EB;
$color_google_plus:         			#E1584B;
$color_email:               			#3498DB;

//Font sizes
$font_size_large_step:                  $font_size_source * ($font_size_large_coef - 1) / 6;
$font_size_small_step:                  ($font_size_source - ($font_size_source * $font_size_small_coef)) / 6;

$font_size_xxxxxsmall:       			$font_size_source - $font_size_small_step * 6;
$font_size_xxxxsmall:       			$font_size_source - $font_size_small_step * 5;
$font_size_xxxsmall:        			$font_size_source - $font_size_small_step * 4;
$font_size_xxsmall:         			$font_size_source - $font_size_small_step * 3;
$font_size_xsmall:          			$font_size_source - $font_size_small_step * 2;
$font_size_small:           			$font_size_source - $font_size_small_step * 1;
$font_size_base:            			$font_size_source;
$font_size_large:           			$font_size_source + $font_size_large_step * 1;
$font_size_xlarge:          			$font_size_source + $font_size_large_step * 2;
$font_size_xxlarge:         			$font_size_source + $font_size_large_step * 3;
$font_size_xxxlarge:        			$font_size_source + $font_size_large_step * 4;
$font_size_xxxxlarge:       			$font_size_source + $font_size_large_step * 5;
$font_size_xxxxxlarge:       			$font_size_source + $font_size_large_step * 6;
//END SUB SETTINGS

//FONTS MANAGEMENT
$font_families: ();
@each $item, $property in $qtr_font_families {
    //Font name list to be added to $font_families
    $temp: ();
    //Font weight for Google Fonts only
    $weight: '';
    //If Local font
    @if (map-get($property,type) == 'local') {
        @font-face {
            font-family: map-get($property,name);
            src:    url(map-get($property,path)+map-get($property,name)+'.ttf') format('truetype'),
                    url(map-get($property,path)+map-get($property,name)+'.woff') format('woff'),
                    url(map-get($property,path)+map-get($property,name)+'.svg') format('svg');
            font-weight: normal;
            font-style: normal;
        }
        $temp: (
            #{$item}: unquote('"'+map-get($property, name)+'", '+map-get($property, fallback))
        );
    }
    //If Google Font
    @if (map-get($property,type) == 'google') {
        $google_font_base_uri: 'https://fonts.googleapis.com/css?family=';
        @if (map-get($property,weight) != ''){
            $weight: ':';
        }@else{
            $weight: '';
        }
        @import url($google_font_base_uri+map-get($property,name)+$weight+map-get($property,weight));
        $temp: (
            #{$item}: unquote('"'+map-get($property, name)+'", '+map-get($property, fallback))
        );
    }
    //If no custom font, fallback/system font only
    @if (map-get($property,type) == 'websafe') {
        $temp: (
            #{$item}: unquote(map-get($property,name))
        );
    }
    $font_families: map-merge($font_families,$temp);
}
